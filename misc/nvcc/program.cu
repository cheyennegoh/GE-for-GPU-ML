// leetgpu run ./misc/nvcc/program.cu

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

void write_data(char *filename, float *data, size_t size)
{
	FILE *file = fopen(filename, "wb");
	fwrite(data, sizeof(float), size, file);
	fclose(file);
}

__global__
void evaluate0(float *x, float *pred)
{
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid >= 10) return;

    x += 9 * tid;
    pred += 5 * 0; // 0 is ind number

    float r[2];
	for (int i = 0; i < 2; i++) r[i] = x[i % 9];

    // Generated program

    pred[tid] = r[0];
}

int main(int argc, char *argv[])
{
	// samples = 10
    // individuals = 5
    // inputs = 9

    static float x[10][9] = {{0.44313725490196076, 0.4392156862745098, 0.42745098039215684, 0.4117647058823529, 0.4117647058823529, 0.403921568627451, 0.4117647058823529, 0.43137254901960786, 0.43137254901960786}, 
                             {0.41568627450980394, 0.41568627450980394, 0.41568627450980394, 0.41568627450980394, 0.41568627450980394, 0.41568627450980394, 0.4196078431372549, 0.41568627450980394, 0.41568627450980394}, 
                             {0.3843137254901961, 0.38823529411764707, 0.39215686274509803, 0.3764705882352941, 0.3803921568627451, 0.39215686274509803, 0.38823529411764707, 0.38823529411764707, 0.38823529411764707}, 
                             {0.5803921568627451, 0.5686274509803921, 0.5568627450980392, 0.5882352941176471, 0.5686274509803921, 0.5490196078431373, 0.596078431372549, 0.5607843137254902, 0.5098039215686274}, 
                             {0.5803921568627451, 0.5882352941176471, 0.5882352941176471, 0.5725490196078431, 0.5764705882352941, 0.5764705882352941, 0.5882352941176471, 0.5764705882352941, 0.5686274509803921}, 
                             {0.2627450980392157, 0.2627450980392157, 0.27450980392156865, 0.23137254901960785, 0.24313725490196078, 0.2627450980392157, 0.24313725490196078, 0.24705882352941178, 0.24705882352941178}, 
                             {0.4745098039215686, 0.4549019607843137, 0.4235294117647059, 0.4666666666666667, 0.4392156862745098, 0.40784313725490196, 0.4470588235294118, 0.42745098039215684, 0.4196078431372549}, 
                             {0.4392156862745098, 0.4588235294117647, 0.4549019607843137, 0.4392156862745098, 0.43529411764705883, 0.43137254901960786, 0.4392156862745098, 0.42745098039215684, 0.43529411764705883}, 
                             {0.5843137254901961, 0.6352941176470588, 0.6431372549019608, 0.5333333333333333, 0.592156862745098, 0.6313725490196078, 0.49411764705882355, 0.5215686274509804, 0.5882352941176471}, 
                             {0.5764705882352941, 0.5686274509803921, 0.5607843137254902, 0.5607843137254902, 0.5725490196078431, 0.5882352941176471, 0.5647058823529412, 0.5686274509803921, 0.5686274509803921}};
    static float pred[5][10]; 
    // {{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
    //  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
    //  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
    //  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
    //  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}}

    float *d_x, *d_pred;

	cudaMalloc(&d_x, 10 * 9 * sizeof(float));
    cudaMalloc(&d_pred, 5 * 10 * sizeof(float));

	cudaMemcpy(d_x, x, 10 * 9 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernels
    // kernel_routine<<<gridDim, blockDim>>>(args);
    evaluate0<<<((10 + 255) / 256), 256>>>(d_x, d_pred);
    // ...

    cudaMemcpy(pred, d_pred, 5 * 10 * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_x);
    cudaFree(d_pred);

    if (argc > 1)
	{
		write_data(argv[1], (float *)pred, 5 * 10);
	}

	return 0;
}